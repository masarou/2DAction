/* ====================================================================== */
/**
 * @brief  
 *
 * @note
 *		フローの共通項目、json読み取り等の機能を持たせたクラス
 */
/* ====================================================================== */
#include "System/picojson.h"
#include "FlowBase.h"
#include "FlowManager.h"
#include "System/Message/SystemMessageManager.h"
#include "System/Collision/SystemCollisionManager.h"

FlowBase::FlowBase(std::string fileName)
: m_filePath(fileName)
, m_isInvalidPadCtrl( false )
{
	LoadFlowFile();
}

FlowBase::~FlowBase(void)
{
}

/* ================================================ */
/**
 * @brief	次の画面へ
 */
/* ================================================ */
bool FlowBase::StartFade(const char* eventStr)
{
	for(uint32_t i = 0; i < m_vEventName.size(); ++i){
		if(m_vEventName.at(i).eventStr.compare(eventStr) == 0){
			bool changeResult = FlowManager::GetInstance()->ChangeFlow(m_vEventName.at(i).filePath.c_str());
			if( changeResult ){
				m_isInvalidPadCtrl = true;
			}
			return changeResult;
		}
	}
	DEBUG_ASSERT( 0, "event名がない");
	return false;
}

/* ============================================== */
/**
 * @brief	終了処理
 */
/* ================================================ */
bool FlowBase::Finish()
{
	if( !ReleaseAllEnd() ){
		return false;
	}
	//! まだ子タスクの終了待ち
	return FinishFlow();
}

/* ============================================== */
/**
 * @brief	jsonファイルの読み込み
 */
/* ================================================ */
void FlowBase::LoadFlowFile()
{
	std::ifstream ifs(m_filePath.c_str());

	picojson::value root;
	picojson::parse( root, ifs);
	
	picojson::value sceneData = root.get("eventdata");
	for(uint32_t i = 0;; ++i){
		picojson::value null;
		if(sceneData.get(i) == null){
			break;
		}
		FLOW_DATA data;
		data.eventStr = sceneData.get(i).get("event").get<std::string>();
		data.filePath = sceneData.get(i).get("path").get<std::string>();
		m_vEventName.push_back(data);
	}

	if(m_vEventName.empty()){
		DEBUG_ASSERT( 0, "m_vEventName is empty!!");
	}

}

/* ============================================== */
/**
 * @brief	子タスク更新処理
 */
/* ================================================ */
void FlowBase::UpdateFlow()
{
	// 派生先の子タスク更新前Update
	UpdateFlowPreChildTask();

	if( !m_isInvalidPadCtrl ){
		CallPadEvent();	// パッド入力取得
	}

	// 子の更新
	ChildUpdate();

	// 派生先の子タスク更新後Update
	UpdateFlowAfterChildTask();
}

/* ============================================== */
/**
 * @brief	子タスク追加
 */
/* ================================================ */
void FlowBase::AddChildTask(TaskUnit *pTask)
{
	if(pTask){
		m_vTaskUnit.push_back(pTask);
	}
}

/* ============================================== */
/**
 * @brief	子タスク更新処理
 */
/* ================================================ */
void FlowBase::ChildUpdate()
{
	Exec();				//! 位置等の更新
	CollisionManager::GetInstance()->CollisionUpdate();			// 衝突判定更新+各クラスにイベント発行	
	SystemMessageManager::GetInstance()->StartMessageEvent();	// 各クラスの相互イベント処理を行う
	DrawUpdate();		//! 描画等の更新
}